package corbos.orderapi.data;

import java.util.ArrayList;
import java.util.List;
import java.util.stream.Collectors;
import org.springframework.stereotype.Repository;

import corbos.orderapi.models.Order;

@Repository
public class OrderInMemoryDao implements OrderDao {

    private static final List<Order> orders = new ArrayList<>();
    enum Side { Buy, Sell; }
    enum OrderStatus {BEGIN,NEW,PARTIAL,COMPLETED,CANCELED;}

    @Override
    public Order add() {
    	int nextOrderId = orders.stream()
                .mapToInt(i -> i.getOrderID())
                .max()
                .orElse(0) + 1;
        int nextClientId = orders.stream()
                .mapToInt(i -> i.getClientID())
                .max()
                .orElse(0) + 1;
        Order order = new Order();
        
        order.setOrderID(nextOrderId);
        order.setClientID(nextClientId);
        order.setOrderStatus(OrderStatus.BEGIN.name());
        orders.add(order);
        return order;
    }
    
    @Override
    public Order update(Order order) {
		/*
		 * Order newOrder = new Order(); newOrder.setOrderID(order.getOrderID());
		 * newOrder.setClientID(order.getClientID());
		 * newOrder.setStockSymbol(order.getStockSymbol());
		 * newOrder.setSide(order.getSide());
		 * newOrder.setOrderStatus(OrderStatus.BEGIN.name());
		 */
    	int i = 0;
    	for (Order x : orders) {
    		if ( order.getOrderID() == x.getOrderID()) {
    			if (order.getClientID() == x.getClientID()) {
    				if (x.getOrderStatus().equals("BEGIN") || x.getOrderStatus().equals("NEW") || x.getOrderStatus().equals("PARTIAL")){
    					orders.add(i, order);
    					return order;
    				} else {
    					System.out.println("Order has the wrong Update Status");
    				}
    			} else {
    				System.out.println("client id does not match");
    			}
    		} else {
    			System.out.println("order id does not match");
    		}
    		i++;
    	}
        return null;
    }

    @Override
    public List<Order> getAll() {
        return new ArrayList<>(orders);
    }

	@Override
	public Order findById(int id) {
		// TODO Auto-generated method stub
		return null;
	}


	@Override
	public boolean deleteById(int id) {
		// TODO Auto-generated method stub
		return false;
	}

	/*
	 * @Override public Order findById(int id) { return orders.stream() .filter(i ->
	 * i.getId() == id) .findFirst() .orElse(null); }
	 * 
	 * @Override public boolean update(Order order) {
	 * 
	 * int index = 0; while (index < orders.size() && orders.get(index).getId() !=
	 * order.getId()) { index++; }
	 * 
	 * if (index < orders.size()) { orders.set(index, order); } return index <
	 * orders.size(); }
	 * 
	 * @Override public boolean deleteById(int id) { return orders.removeIf(i ->
	 * i.getId() == id); }
	 */

}